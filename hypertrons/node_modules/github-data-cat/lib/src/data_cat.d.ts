import Logger = require('bunyan');
import { Repo, UserWithTimeStamp, Issue, PullRequest, UserWithTimeStampAndEmail } from './structrue/data-types';
interface OrgProxy {
    repos: (login: string, updatedAfter?: Date) => Promise<Repo[]>;
}
interface RepoFullParam {
    stars?: boolean;
    forks?: boolean;
    issues?: boolean;
    pulls?: boolean;
    contributors?: boolean;
}
interface RepoPoxy {
    info: (owner: string, name: string) => Promise<Repo>;
    stars: (owner: string, name: string, updatedAfter?: Date) => Promise<UserWithTimeStamp[]>;
    forks: (owner: string, name: string, updatedAfter?: Date) => Promise<UserWithTimeStamp[]>;
    issues: (owner: string, name: string, updatedAfter?: Date) => Promise<Issue[]>;
    pulls: (owner: string, name: string, updatedAfter?: Date) => Promise<PullRequest[]>;
    contributors: (owner: string, name: string, branch: string, commitLimit?: number) => Promise<UserWithTimeStampAndEmail[]>;
    full: (owner: string, name: string, param?: RepoFullParam, updatedAfter?: Date) => Promise<Repo>;
}
interface DataCatOption {
    tokens: string[];
    logger?: Logger;
    maxConcurrentReqNumber?: number;
    filterStatusCode?: number[];
    maxRetryTimes?: number;
}
export declare class DataCat {
    private logger;
    private client;
    private tokens;
    private maxConcurrentReqNumber;
    private filterStatusCode;
    private maxRetryTimes;
    inited: boolean;
    constructor(options: DataCatOption);
    init(): Promise<void>;
    org: OrgProxy;
    repo: RepoPoxy;
}
export {};
