"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const pullRequestsPerPage = 5;
const commentCount = 100;
const labelCount = 10;
const commitCount = 100;
const reviewCount = 100;
const reviewCommentCount = 100;
function parsePullRequest(pr) {
    let reivewComments = [];
    pr.reviews.nodes.forEach(r => {
        r.comments.nodes.filter(c => c.author).forEach(c => {
            reivewComments.push({
                id: c.id,
                url: c.url,
                login: c.author.login,
                body: c.body,
                createdAt: c.createdAt
            });
        });
    });
    let additions = 0;
    let deletions = 0;
    pr.commits.nodes.forEach(ci => {
        additions += ci.commit.additions;
        deletions += ci.commit.deletions;
    });
    return {
        id: pr.id,
        author: pr.author.login,
        number: pr.number,
        createdAt: pr.createdAt,
        updatedAt: pr.updatedAt,
        closedAt: pr.closedAt,
        mergedAt: pr.mergedAt,
        title: pr.title,
        body: pr.body,
        labels: pr.labels.nodes.map(l => l.name),
        comments: pr.comments.nodes.filter(c => c.author).map(c => {
            return {
                id: c.id,
                login: c.author.login,
                body: c.body,
                url: c.url,
                createdAt: c.createdAt
            };
        }),
        reviewComments: reivewComments,
        additions,
        deletions
    };
}
async function getPullRequests(client, owner, name, updatedAfter) {
    let prsInfo;
    let prs = [];
    let pageInfo;
    do {
        prsInfo = await client.query(getMoreIssueSql, {
            owner,
            name,
            prCount: pullRequestsPerPage,
            cursor: pageInfo ? pageInfo.endCursor : null,
            labelCount,
            commentCount,
            reviewCount,
            commitCount,
            reviewCommentCount
        });
        if (!prsInfo || !prsInfo.repository || !prsInfo.repository.pullRequests || prsInfo.repository.pullRequests.nodes.length === 0)
            break;
        if (updatedAfter && new Date(prsInfo.repository.pullRequests.nodes[prsInfo.repository.pullRequests.nodes.length - 1].updatedAt) <= updatedAfter) {
            prs = prs.concat(prsInfo.repository.pullRequests.nodes.filter(pr => pr.author && new Date(pr.updatedAt) >= updatedAfter).map(parsePullRequest));
            break;
        }
        prs = prs.concat(prsInfo.repository.pullRequests.nodes.filter(pr => pr.author).map(parsePullRequest));
        pageInfo = prsInfo.repository.pullRequests.pageInfo;
    } while (pageInfo.hasNextPage);
    return prs;
}
exports.getPullRequests = getPullRequests;
const getMoreIssueSql = `
query getMorePullRequests($owner: String!, $name: String!, $prCount: Int, $cursor: String, $labelCount: Int, $commentCount: Int, $commitCount: Int, $reviewCount: Int, $reviewCommentCount: Int) {
    rateLimit {
      resetAt
      remaining
      cost
    }
    repository(owner: $owner, name: $name) {
      pullRequests(first: $prCount, orderBy: {field: UPDATED_AT, direction: DESC}, after: $cursor) {
        pageInfo {
          hasNextPage
          endCursor
        }
        nodes {
          id: databaseId
          title
          body
          number
          createdAt
          updatedAt
          closedAt
          mergedAt
          author {
            login
          }
          labels(first: $labelCount) {
            nodes {
              name
            }
          }
          comments(first: $commentCount) {
            nodes {
              id: databaseId
              body
              url
              author {
                login
              }
              createdAt
            }
          }
          commits(first: $commitCount) {
            nodes {
              commit {
                additions
                deletions
              }
            }
          }
          reviews(first: $reviewCount) {
            nodes {
              comments(first: $reviewCommentCount) {
                nodes {
                  id: databaseId
                  url
                  author {
                    login
                  }
                  body
                  createdAt
                }
              }
            }
          }
        }
      }
    }
  }
`;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVsbC1yZXF1ZXN0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdHJ1Y3RydWUvcHVsbC1yZXF1ZXN0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUdBLE1BQU0sbUJBQW1CLEdBQVcsQ0FBQyxDQUFDO0FBQ3RDLE1BQU0sWUFBWSxHQUFHLEdBQUcsQ0FBQztBQUN6QixNQUFNLFVBQVUsR0FBRyxFQUFFLENBQUM7QUFDdEIsTUFBTSxXQUFXLEdBQVcsR0FBRyxDQUFDO0FBQ2hDLE1BQU0sV0FBVyxHQUFXLEdBQUcsQ0FBQztBQUNoQyxNQUFNLGtCQUFrQixHQUFXLEdBQUcsQ0FBQztBQUV2QyxTQUFTLGdCQUFnQixDQUFDLEVBQWtCO0lBQzFDLElBQUksY0FBYyxHQUFjLEVBQUUsQ0FBQztJQUNuQyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDM0IsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNqRCxjQUFjLENBQUMsSUFBSSxDQUFDO2dCQUNsQixFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUU7Z0JBQ1IsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHO2dCQUNWLEtBQUssRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUs7Z0JBQ3JCLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSTtnQkFDWixTQUFTLEVBQUUsQ0FBQyxDQUFDLFNBQVM7YUFDdkIsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUNILElBQUksU0FBUyxHQUFXLENBQUMsQ0FBQztJQUMxQixJQUFJLFNBQVMsR0FBVyxDQUFDLENBQUM7SUFDMUIsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFL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