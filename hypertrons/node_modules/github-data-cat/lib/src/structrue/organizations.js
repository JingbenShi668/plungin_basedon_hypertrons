"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const perPageNum = 5;
function parseRepo(r) {
    let repo = {
        // basic
        id: r.id,
        owner: r.owner ? r.owner.login : null,
        ownerInfo: r.owner,
        name: r.name,
        createdAt: r.createdAt ? new Date(r.createdAt) : null,
        updatedAt: r.updatedAt ? new Date(r.updatedAt) : null,
        pushedAt: r.pushedAt ? new Date(r.pushedAt) : null,
        license: r.licenseInfo ? r.licenseInfo.name : null,
        codeOfConduct: r.codeOfConduct ? r.codeOfConduct.url : null,
        isFork: r.isFork,
        description: r.description,
        language: r.primaryLanguage ? r.primaryLanguage.name : null,
        // star
        starCount: r.stargazers ? r.stargazers.totalCount : 0,
        stars: [],
        // watch
        watchCount: r.watchers ? r.watchers.totalCount : 0,
        // fork
        forkCount: r.forkCount,
        directForkCount: r.forks ? r.forks.totalCount : 0,
        forks: [],
        // branch
        branchCount: r.refs ? r.refs.totalCount : 0,
        defaultBranchName: r.defaultBranchRef ? r.defaultBranchRef.name : "",
        defaultBranchCommitCount: (r.defaultBranchRef && r.defaultBranchRef.target) ? r.defaultBranchRef.target.history.totalCount : 0,
        // release
        releaseCount: r.releases ? r.releases.totalCount : 0,
        // issue
        issues: [],
        // pull request
        pulls: [],
        // contributor
        contributors: []
    };
    return repo;
}
async function getRepos(login, client, updatedAfter) {
    let repos = [];
    let pageInfo;
    let reposInfo;
    do {
        reposInfo = await client.query(listReposSql, {
            login,
            num: perPageNum,
            cursor: pageInfo ? pageInfo.endCursor : null
        });
        if (!reposInfo || !reposInfo.repositoryOwner || !reposInfo.repositoryOwner.repositories
            || reposInfo.repositoryOwner.repositories.nodes.length === 0)
            break;
        let lastUpdatedAt = new Date(reposInfo.repositoryOwner.repositories
            .nodes[reposInfo.repositoryOwner.repositories.nodes.length - 1].updatedAt);
        if (updatedAfter && lastUpdatedAt < updatedAfter) {
            repos = repos.concat(reposInfo.repositoryOwner.repositories.nodes.filter(r => new Date(r.updatedAt) >= updatedAfter).map(parseRepo));
            break;
        }
        repos = repos.concat(reposInfo.repositoryOwner.repositories.nodes.map(parseRepo));
        pageInfo = reposInfo.repositoryOwner.repositories.pageInfo;
    } while (pageInfo.hasNextPage);
    return repos;
}
exports.getRepos = getRepos;
const listReposSql = `query listReopsFirst($login: String!, $num: Int, $cursor: String) {
    rateLimit {
        remaining
        resetAt
        cost
    }
    repositoryOwner(login: $login) {
        repositories(first: $num, orderBy: {field: UPDATED_AT, direction: DESC}, after:$cursor) {
            pageInfo {
                hasNextPage
                endCursor
            }
            nodes {
                owner {
                    login
                    __typename
                    ... on User {
                        name
                        email
                        bio
                        location
                        company
                        createdAt
                        websiteUrl
                        repositories {
                            totalCount
                        }
                    }
                    ... on Organization {
                        name
                        email
                        description
                        location
                        websiteUrl
                        repositories {
                            totalCount
                        }
                        membersWithRole {
                            totalCount
                        }
                    }
                }
                name
                id: databaseId
                updatedAt
                createdAt
                pushedAt
                isFork
                description
                primaryLanguage {
                    name
                }
                refs(refPrefix: "refs/heads/") {
                    totalCount
                }
                defaultBranchRef {
                    name
                    target {
                        ... on Commit {
                            history(author: {}) {
                                totalCount
                            }
                        }
                    }
                }
                releases {
                    totalCount
                }
                stargazers {
                    totalCount
                }
                watchers {
                    totalCount
                }
                forkCount
                forks {
                    totalCount
                }
                licenseInfo {
                    name
                }
                codeOfConduct {
                    url
                }
            }
        }
    }
}`;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JnYW5pemF0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdHJ1Y3RydWUvb3JnYW5pemF0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUdBLE1BQU0sVUFBVSxHQUFHLENBQUMsQ0FBQztBQUVyQixTQUFTLFNBQVMsQ0FBQyxDQUFjO0lBQy9CLElBQUksSUFBSSxHQUFTO1FBQ2YsUUFBUTtRQUNSLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRTtRQUNSLEtBQUssRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSTtRQUNyQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLEtBQUs7UUFDbEIsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJO1FBQ1osU0FBUyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSTtRQUNyRCxTQUFTLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJO1FBQ3JELFFBQVEsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUk7UUFDbEQsT0FBTyxFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJO1FBQ2xELGFBQWEsRUFBRSxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSTtRQUMzRCxNQUFNLEVB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