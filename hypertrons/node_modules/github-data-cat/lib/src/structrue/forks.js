"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const forkCountPerPage = 20;
function parseFork(forkInfo) {
    return {
        login: forkInfo.owner.login,
        time: forkInfo.createdAt
    };
}
async function getForks(client, owner, name, updatedAfter) {
    let forks = [];
    let forksInfo;
    let pageInfo;
    do {
        forksInfo = await client.query(getMoreIssueSql, {
            owner,
            name,
            forkCount: forkCountPerPage,
            cursor: pageInfo ? pageInfo.endCursor : null
        });
        if (!forksInfo || !forksInfo.repository || !forksInfo.repository.forks || forksInfo.repository.forks.nodes.length === 0)
            break;
        if (updatedAfter && new Date(forksInfo.repository.forks.nodes[forksInfo.repository.forks.nodes.length - 1].createdAt) <= updatedAfter) {
            forks = forks.concat(forksInfo.repository.forks.nodes.filter(f => f.owner && f.owner.login && new Date(f.createdAt) >= updatedAfter).map(parseFork));
            break;
        }
        forks = forks.concat(forksInfo.repository.forks.nodes.filter(f => f.owner).map(parseFork));
        pageInfo = forksInfo.repository.forks.pageInfo;
    } while (pageInfo.hasNextPage);
    return forks;
}
exports.getForks = getForks;
const getMoreIssueSql = `
query getMoreForks($owner: String!, $name: String!, $forkCount: Int, $cursor: String) {
    rateLimit {
        resetAt
        remaining
        cost
    }
    repository(owner: $owner, name: $name) {
        forks(first: $forkCount, orderBy: {field: UPDATED_AT, direction: DESC}, after: $cursor) {
            pageInfo {
                hasNextPage
                endCursor
            }
            nodes {
                owner {
                    login
                }
                createdAt
            }
        }
    }
}
`;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ya3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3RydWN0cnVlL2ZvcmtzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBR0EsTUFBTSxnQkFBZ0IsR0FBRyxFQUFFLENBQUM7QUFFNUIsU0FBUyxTQUFTLENBQUMsUUFBcUI7SUFDcEMsT0FBTztRQUNILEtBQUssRUFBRSxRQUFRLENBQUMsS0FBSyxDQUFDLEtBQUs7UUFDM0IsSUFBSSxFQUFFLFFBQVEsQ0FBQyxTQUFTO0tBQzNCLENBQUM7QUFDTixDQUFDO0FBRU0sS0FBSyxVQUFVLFFBQVEsQ0FBQyxNQUFvQixFQUFFLEtBQWEsRUFBRSxJQUFZLEVBQUUsWUFBbUI7SUFDakcsSUFBSSxLQUFLLEdBQXdCLEVBQUUsQ0FBQTtJQUNuQyxJQUFJLFNBQW1CLENBQUM7SUFDeEIsSUFBSSxRQUFrQixDQUFDO0lBQ3ZCLEdBQUc7UUFDQyxTQUFTLEdBQUcsTUFBTSxNQUFNLENBQUMsS0FBSyxDQUFxQixlQUFlLEVBQUU7WUFDaEUsS0FBSztZQUNMLElBQUk7WUFDSixTQUFTLEVBQUUsZ0JBQWdCO1lBQzNCLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUk7U0FDL0MsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLEtBQUssSUFBSSxTQUFTLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUM7WUFBRSxNQUFNO1FBQy9ILElBQUksWUFBWSxJQUFJLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLFlBQVksRUFBRTtZQUNuSSxLQUFLLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksWUFBWSxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDckosTUFBTTtTQUNUO1FBQ0QsS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztRQUMzRixRQUFRLEdBQUcsU0FBUyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDO0tBQ2xELFFBQVEsUUFBUSxDQUFDLFdBQVcsRUFBRTtJQUMvQixPQUFPLEtBQUssQ0FBQztBQUNqQixDQUFDO0FBcEJELDRCQW9CQztBQXlCRCxNQUFNLGVBQWUsR0FBRzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQXNCdkIsQ0FBQyJ9