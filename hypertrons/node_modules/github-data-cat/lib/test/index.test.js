"use strict";
/* Copyright 2019 ZhaoShengyu
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at

 *    http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const nock_1 = tslib_1.__importDefault(require("nock"));
const github_graphql_v4_client_1 = require("github-graphql-v4-client");
// set timeout to 30s to fit network
jest.setTimeout(30000);
const mockData = (response, status = 200) => {
    nock_1.default('https://api.github.com').post('/graphql').reply(status, response);
};
describe('GitHub GraphQL Client', () => {
    it('is a class', () => {
        expect(github_graphql_v4_client_1.GitHubClient).toBeInstanceOf(Object);
    });
    it('Not accept empty token array', () => {
        expect(() => {
            const client = new github_graphql_v4_client_1.GitHubClient({
                tokens: []
            });
            client.init();
        }).toThrow();
    });
    it('Should call init before query', () => {
        const client = new github_graphql_v4_client_1.GitHubClient({
            tokens: ['secrect123']
        });
        expect(client.query(``, {})).
            rejects.toEqual(new Error('Client not inited yet! Call `await client.init()` to init.'));
    });
    it('Query not exist resources', async () => {
        const client = new github_graphql_v4_client_1.GitHubClient({
            tokens: ['secret123']
        });
        mockData({
            data: {
                rateLimit: {
                    remaining: 5000,
                    resetAt: new Date().getTime() + 10000
                }
            }
        });
        await client.init();
        const query = `query {
        repository(owner: "openx-lab", name:"not-gonna-exist") {
          name
        }
      }`;
        mockData({
            data: {
                repository: null
            },
            errors: [
                {
                    type: 'NOT_FOUND',
                    path: [
                        'repository'
                    ],
                    locations: [
                        {
                            line: 7,
                            column: 3
                        }
                    ],
                    message: 'Could not resolve to a Repository with the name \'not-gonna-exist\'.'
                }
            ]
        });
        const ret = await client.query(query, {});
        expect(ret).toBeNull();
    });
    it('Query a current resource with variables', async () => {
        const client = new github_graphql_v4_client_1.GitHubClient({
            tokens: ['secret123']
        });
        mockData({
            data: {
                rateLimit: {
                    remaining: 5000,
                    resetAt: new Date().getTime() + 10000
                }
            }
        });
        await client.init();
        const owner = 'openx-lab';
        const name = 'github-graphql-client';
        const query = `query RepoInfo($owner: String!, $name: String!) {
        repository(owner: $owner, name: $name) {
          owner {
            login
            __typename
          }
          name
          createdAt
        }
      }`;
        const expectData = {
            data: {
                rateLimit: {
                    remaining: 5000,
                    resetAt: new Date().getTime() + 10000
                },
                repository: {
                    owner: {
                        login: owner,
                        __typename: 'Organization'
                    },
                    name,
                    createdAt: '2019-09-03T13:32:52Z'
                }
            }
        };
        mockData(expectData);
        const ret = await client.query(query, { owner, name });
        expect(ret).toMatchObject(expectData.data);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3Rlc3QvaW5kZXgudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7R0FhRzs7O0FBRUgsd0RBQXdCO0FBQ3hCLHVFQUF3RDtBQUV4RCxvQ0FBb0M7QUFDcEMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUV2QixNQUFNLFFBQVEsR0FBRyxDQUFDLFFBQWEsRUFBRSxTQUFpQixHQUFHLEVBQUUsRUFBRTtJQUN2RCxjQUFJLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztBQUMxRSxDQUFDLENBQUM7QUFFRixRQUFRLENBQUMsdUJBQXVCLEVBQUUsR0FBRyxFQUFFO0lBQ3JDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsR0FBRyxFQUFFO1FBQ3BCLE1BQU0sQ0FBQyx1Q0FBWSxDQUFDLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzlDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDhCQUE4QixFQUFFLEdBQUcsRUFBRTtRQUN0QyxNQUFNLENBQUMsR0FBRyxFQUFFO1lBQ1YsTUFBTSxNQUFNLEdBQUcsSUFBSSx1Q0FBWSxDQUFDO2dCQUM5QixNQUFNLEVBQUUsRUFBRTthQUNYLENBQUMsQ0FBQztZQUNILE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNoQixDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNmLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLCtCQUErQixFQUFFLEdBQUcsRUFBRTtRQUN2QyxNQUFNLE1BQU0sR0FBRyxJQUFJLHVDQUFZLENBQUM7WUFDOUIsTUFBTSxFQUFFLENBQUMsWUFBWSxDQUFDO1NBQ3ZCLENBQUMsQ0FBQztRQUNILE1BQU0sQ0FBQyxNQUFNLENB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