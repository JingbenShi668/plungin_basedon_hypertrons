#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fs_1 = require("fs");
const path_1 = require("path");
const default_requires_1 = tslib_1.__importDefault(require("./default_requires"));
// tslint:disable-next-line: no-var-requires
const deglob = require('deglob');
// tslint:disable-next-line: no-var-requires
const gutil = require('gulp-util');
const moduleName = 'open-md-checker';
function loadConfig() {
    const defaultConfig = {
        patterns: ['**/*.md'],
        options: {
            useGitIgnore: true,
            ignore: ['node_modules/**/*'],
        },
    };
    const configFile = process.env.MD_LINT_CONFIG_PATH;
    if (!configFile) {
        gutil.log(moduleName, gutil.colors.yellow('Not set env MD_LINT_CONFIG_PATH, use default config'));
        return defaultConfig;
    }
    if (!fs_1.existsSync(configFile)) {
        gutil.log(moduleName, gutil.colors.yellow(`Can not found config file ${configFile}, use default config`));
        return defaultConfig;
    }
    const configs = fs_1.readFileSync(configFile).toString();
    if (configs) {
        const json = JSON.parse(configs);
        if (json[moduleName])
            return json[moduleName];
    }
    gutil.log(moduleName, gutil.colors.yellow(`Load config from ${configFile} error, use default config`));
    return defaultConfig;
}
function getRemarkInstance() {
    const remark = require('remark');
    let md_lint_requires = default_requires_1.default();
    // load MarkdownLint
    if (config.requires) {
        if (!config.requires.startsWith('/')) {
            config.requires = path_1.join(process.cwd(), config.requires);
        }
        if (!fs_1.existsSync(config.requires)) {
            gutil.log(moduleName, gutil.colors.yellow(`Can not found md-lint-requires file ${config.requires}, use default config`));
        }
        else {
            gutil.log(moduleName, gutil.colors.yellow(`Load md-lint-requires from ${config.requires}`));
            md_lint_requires = require(config.requires);
        }
    }
    return remark().use(md_lint_requires);
}
function doCheck(files) {
    const report = require('vfile-reporter');
    const remarkInstance = getRemarkInstance();
    files.forEach(filePath => {
        const mdContent = fs_1.readFileSync(filePath, 'utf8');
        if (mdContent) {
            remarkInstance.process(mdContent, (err, file) => {
                const res = report(err || file);
                console.log(filePath);
                console.log(res);
                console.log();
                if (res !== 'no issues found')
                    process.exitCode = -1;
            });
        }
    });
}
const config = loadConfig();
deglob(config.patterns, config.options, (err, files) => {
    if (err) {
        gutil.log(moduleName, gutil.colors.red(err));
        process.exit(-1);
    }
    doCheck(files);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLDJCQUE4QztBQUM5QywrQkFBNEI7QUFDNUIsa0ZBQWlEO0FBQ2pELDRDQUE0QztBQUM1QyxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDakMsNENBQTRDO0FBQzVDLE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUVuQyxNQUFNLFVBQVUsR0FBRyxpQkFBaUIsQ0FBQztBQWVyQyxTQUFTLFVBQVU7SUFDakIsTUFBTSxhQUFhLEdBQVc7UUFDNUIsUUFBUSxFQUFFLENBQUUsU0FBUyxDQUFFO1FBQ3ZCLE9BQU8sRUFBRTtZQUNQLFlBQVksRUFBRSxJQUFJO1lBQ2xCLE1BQU0sRUFBRSxDQUFFLG1CQUFtQixDQUFFO1NBQ2hDO0tBQ0YsQ0FBQztJQUVGLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUM7SUFDbkQsSUFBSSxDQUFDLFVBQVUsRUFBRTtRQUNmLEtBQUssQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLHFEQUFxRCxDQUFDLENBQUMsQ0FBQztRQUNsRyxPQUFPLGFBQWEsQ0FBQztLQUN0QjtJQUNELElBQUksQ0FBQyxlQUFVLENBQUMsVUFBVSxDQUFDLEVBQUU7UUFDM0IsS0FBSyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsNkJBQTZCLFVBQVUsc0JBQXNCLENBQUMsQ0FBQyxDQUFDO1FBQzFHLE9BQU8sYUFBYSxDQUFDO0tBQ3RCO0lBRUQsTUFBTSxPQUFPLEdBQUcsaUJBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNwRCxJQUFJLE9BQU8sRUFBRTtRQUNYLE1BQU0sSUFB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