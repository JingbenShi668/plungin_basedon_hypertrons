"use strict";
/* Copyright 2019 ZhaoShengyu
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at

 *    http://www.apache.org/licenses/LICENSE-2.0

 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("@octokit/graphql");
const Logger = require("bunyan");
const waitFor = require("p-wait-for");
class GitHubClient {
    constructor(options) {
        this.tokens = [];
        this.maxConcurrentReqNumber = 10;
        this.concurrentReqNumber = 0;
        this.logger = Logger.createLogger({
            level: Logger.INFO,
            name: 'GitHub-GraphQL-Client'
        });
        this.getConnectionRetryInterval = 10000;
        this.filterStatusCode = [400, 401, 403, 404];
        this.requestCostPrediction = 15;
        this.maxRetryTimes = 10;
        if (options.tokens.length === 0) {
            throw new Error('At least one token needed.');
        }
        if (options.logger) {
            this.logger = options.logger;
        }
        if (options.filterStatusCode) {
            this.filterStatusCode = options.filterStatusCode;
        }
        if (options.maxRetryTimes) {
            this.maxRetryTimes = options.maxRetryTimes;
        }
        if (options.maxConcurrentReqNumber) {
            this.maxConcurrentReqNumber = options.maxConcurrentReqNumber;
        }
        this.tokens = options.tokens.map((t) => {
            return {
                token: t,
                ratelimitRemaining: -1,
                ratelimitReset: -1
            };
        });
        this.inited = false;
    }
    async init() {
        await Promise.all(this.tokens.map((token) => this.initToken(token)));
        this.logger.info(`Token inited done, tokens = ${JSON.stringify(this.tokens)}`);
        this.inited = true;
    }
    async query(q, p) {
        if (!this.inited) {
            throw new Error('Client not inited yet! Call `await client.init()` to init.');
        }
        // add rate limit
        const firstBraceIndex = q.indexOf('{') + 1;
        q = q.substr(0, firstBraceIndex) + rateLimitQueryStr + q.substr(firstBraceIndex);
        return this.internalQuery(q, p, 0);
    }
    resetToken(token) {
        if (this.hasSufficientRemaing(token)) {
            return;
        }
        // add 1s to ensure reset on server side
        let resetTime = new Date(token.ratelimitReset).getTime() - new Date().getTime() + 1000;
        if (resetTime < 0) {
            this.logger.error(`Something wrong with rate limit maintain.`);
            resetTime = 10 * 60 * 1000;
        }
        setTimeout(() => {
            this.initToken(token);
        }, resetTime);
    }
    async initToken(token) {
        const response = await graphql_1.graphql(rateLimitQuerySql, { headers: { authorization: `token ${token.token}` } });
        token.ratelimitRemaining = response.rateLimit.remaining;
        token.ratelimitReset = response.rateLimit.resetAt;
        this.resetToken(token);
    }
    // get a valid token
    async getToken() {
        let token;
        await waitFor(() => {
            if (this.concurrentReqNumber >= this.maxConcurrentReqNumber) {
                return false;
            }
            const availableTokens = this.tokens.filter((t) => this.hasSufficientRemaing(t));
            if (availableTokens.length === 0) {
                this.logger.warn(`No avialable token found for now, will try later`);
                return false;
            }
            this.concurrentReqNumber += 1;
            token = availableTokens[Math.floor(Math.random() * availableTokens.length)];
            return true;
        }, {
            interval: this.getConnectionRetryInterval
        });
        return token;
    }
    hasSufficientRemaing(token) {
        return token.ratelimitRemaining > this.requestCostPrediction * this.maxConcurrentReqNumber;
    }
    // query function
    async internalQuery(q, p, retryCount) {
        const token = await this.getToken();
        try {
            // set auth token
            Object.assign(p, { headers: { authorization: `token ${token.token}` } });
            const res = (await graphql_1.graphql(q, p));
            const rateLimitRes = res;
            this.concurrentReqNumber--;
            if (!rateLimitRes.rateLimit) {
                this.logger.error(`No rate limit returned for query = ${q}, param = ${JSON.stringify(p)}`);
                process.exit(1);
            }
            token.ratelimitRemaining = rateLimitRes.rateLimit.remaining;
            token.ratelimitReset = rateLimitRes.rateLimit.resetAt;
            this.resetToken(token);
            return res;
        }
        catch (e) {
            this.logger.error(`Error happened, e = ${JSON.stringify(e)}`);
            this.concurrentReqNumber--;
            let apiRateLimitExceeded = false;
            const response = e;
            if (response.errors) {
                // log error if exists
                if (response.errors.find((e) => e.message.includes('API rate limit exceeded'))) {
                    // rate limit exceeded
                    this.logger.warn(`Token API rate limit exceeded, token = ${JSON.stringify(token)}`);
                    apiRateLimitExceeded = true;
                    this.resetToken(token);
                }
                else if (response.errors.find((e) => e.type && e.type === 'NOT_FOUND')) {
                    // not found, maybe deleted
                    return null;
                }
            }
            if (retryCount >= this.maxRetryTimes) {
                // retry times exceed the max retry times, return the data no matter there is any
                this.logger.warn(`Retry time exceed max retry times. query = ${q}`);
                return response.data;
            }
            if (apiRateLimitExceeded
                || !response.status
                || (response.status >= 400 && !this.filterStatusCode.includes(response.status))) {
                // api rate limit exceeded
                // no status field
                // status >= 400
                return this.internalQuery(q, p, retryCount + 1);
            }
            else if (response.data) {
                // other status code, return data if exists
                return response.data;
            }
        }
        return null;
    }
}
exports.GitHubClient = GitHubClient;
const rateLimitQueryStr = `
rateLimit {
    resetAt
    remaining
}
`;
const rateLimitQuerySql = `
query {
    ${rateLimitQueryStr}
}
`;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7O0dBYUc7O0FBRUgsOENBQTJDO0FBQzNDLGlDQUFrQztBQUNsQyxzQ0FBdUM7QUFtQnZDLE1BQWEsWUFBWTtJQWdCdkIsWUFBWSxPQUFxQjtRQWR6QixXQUFNLEdBQVksRUFBRSxDQUFDO1FBQ3JCLDJCQUFzQixHQUFXLEVBQUUsQ0FBQztRQUNwQyx3QkFBbUIsR0FBVyxDQUFDLENBQUM7UUFDaEMsV0FBTSxHQUFXLE1BQU0sQ0FBQyxZQUFZLENBQUM7WUFDM0MsS0FBSyxFQUFFLE1BQU0sQ0FBQyxJQUFJO1lBQ2xCLElBQUksRUFBRSx1QkFBdUI7U0FDOUIsQ0FBQyxDQUFDO1FBQ0ssK0JBQTBCLEdBQUcsS0FBSyxDQUFDO1FBQ25DLHFCQUFnQixHQUFhLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDbEQsMEJBQXFCLEdBQUcsRUFBRSxDQUFDO1FBQzNCLGtCQUFhLEdBQUcsRUFBRSxDQUFDO1FBS3pCLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQy9CLE1BQU0sSUFBSSxLQUFLLENBQUMsNEJBQTRCLENBQUMsQ0FBQztTQUMvQztRQUNELElBQUksT0FBTyxDQUFDLE1BQU0sRUFBRTtZQUNsQixJQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUM7U0FDOUI7UUFDRCxJQUFJLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRTtZQUM1QixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixDQUFDO1NBQ2xEO1FBQ0QsSUFBSSxPQUFPLENBQUMsYUFBYSxFQUFFO1lBQ3pCLElBQUksQ0FBQyxhQUFhLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQztTQUM1QztRQUNELElBQUksT0FB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